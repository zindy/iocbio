#summary IOCBio generation of mass isotopologue equations
#labels isotopologue

= Introduction =

IOCBio provides a python module `iocbio.kinetics.builder` that constructs mass isotopologue equations.
Another module is provided `iocbio.kinetics.demo_model` that demonstrates how to use the builder
software. The system built by `iocbio.kinetics.oxygen_isotope_model` is studied in the following publication
{{{
David W. Schryer, Pearu Peterson, Ardo Illaste, Marko Vendelin.
Sensitivity analysis of flux determination in heart by H218O-provided 
labeling using a dynamic isotopologue model of energy transfer pathways
PLoS Computational Biology.
}}}
This page presents the software provided by this publication and 
demonstrates its use.

= Usage =

First, download the source code and example files:

  * [http://iocbio.googlecode.com/svn/trunk/iocbio/kinetics/builder.py builder.py] - Python code that provides the symbolic equation generator. 
* [http://iocbio.googlecode.com/svn/trunk/iocbio/kinetics/demo_model.py demo_model.py] - Minimal model to demonstrate the interface and illustrate how the equations are generated.
  * [http://iocbio.googlecode.com/svn/trunk/iocbio/kinetics/oxygen_isotope_model.py oxygen_isotope_model.py] - Oxygen isotope network studied in the above paper.

Please examine the example files for instructions on how to build a custom mass isotopologue model.  

To build the demonstration model, please make sure that 
`iocbio.kinetics.builder` is in the same directory 
as the example file `iocbio.kinetics.demo_model` and run the example file with a Python interpreter. The script outputs the equations generated:
{{{
>>> python demo_model.py
Model kinetic equations:
  dA0/dt = +fin*(Ai0)+rflux*(1/2*C01+1/2*C10+C00)-fflux*(A0*B0+A0*B1)
  dA1/dt = +fin*(Ai1)+rflux*(1/2*C01+1/2*C10+C11)-fflux*(A1*B0+A1*B1)
  dAi0/dt = -fin*(Ai0)
  dAi1/dt = -fin*(Ai1)
  dB0/dt = +rflux*(1/2*C01+1/2*C10+C00)-fflux*(A0*B0+A1*B0)
  dB1/dt = +rflux*(1/2*C01+1/2*C10+C11)-fflux*(A0*B1+A1*B1)
  dC00/dt = +fflux*(A0*B0)-fout*(C00)-rflux*(C00)
  dC01/dt = +fflux*(1/2*A0*B1+1/2*A1*B0)-fout*(C01)-rflux*(C01)
  dC10/dt = +fflux*(1/2*A0*B1+1/2*A1*B0)-fout*(C10)-rflux*(C10)
  dC11/dt = +fflux*(A1*B1)-fout*(C11)-rflux*(C11)
  dCo00/dt = +fout*(C00)
  dCo01/dt = +fout*(C01)
  dCo10/dt = +fout*(C10)
  dCo11/dt = +fout*(C11)
Pool relations:
  A_0 = A0
  A_1 = A1
  Ai_0 = Ai0
  Ai_1 = Ai1
  B_0 = B0
  B_1 = B1
  C_0 = C00
  C_1 = C01+C10
  C_2 = C11
  Co_0 = Co00
  Co_1 = Co01+Co10
  Co_2 = Co11
Applying pool relations:
  dA_0/dt = +fin*(Ai0)+rflux*(1/2*C01+1/2*C10+C00)-fflux*(A0*B0+A0*B1)
  dA_1/dt = +fin*(Ai1)+rflux*(1/2*C01+1/2*C10+C11)-fflux*(A1*B0+A1*B1)
  dAi_0/dt = -fin*(Ai0)
  dAi_1/dt = -fin*(Ai1)
  dB_0/dt = +rflux*(1/2*C01+1/2*C10+C00)-fflux*(A0*B0+A1*B0)
  dB_1/dt = +rflux*(1/2*C01+1/2*C10+C11)-fflux*(A0*B1+A1*B1)
  dC_0/dt = +fflux*(A0*B0)-fout*(C00)-rflux*(C00)
  dC_1/dt = +fflux*(A0*B1+A1*B0)-fout*(C01+C10)-rflux*(C01+C10)
  dC_2/dt = +fflux*(A1*B1)-fout*(C11)-rflux*(C11)
  dCo_0/dt = +fout*(C00)
  dCo_1/dt = +fout*(C01+C10)
  dCo_2/dt = +fout*(C11)
Substituting pool relations to RHS.. done
Mass isotopomer kinetic equations:
  dA_0/dt = +fin*(Ai_0)+rflux*(1/2*C_1+C_0)-fflux*((B_0+B_1)*A_0)
  dA_1/dt = +fin*(Ai_1)+rflux*(1/2*C_1+C_2)-fflux*((B_0+B_1)*A_1)
  dAi_0/dt = -fin*(Ai_0)
  dAi_1/dt = -fin*(Ai_1)
  dB_0/dt = +rflux*(1/2*C_1+C_0)-fflux*((A_0+A_1)*B_0)
  dB_1/dt = +rflux*(1/2*C_1+C_2)-fflux*((A_0+A_1)*B_1)
  dC_0/dt = +fflux*(A_0*B_0)-fout*(C_0)-rflux*(C_0)
  dC_1/dt = +fflux*(A_0*B_1+A_1*B_0)-fout*(C_1)-rflux*(C_1)
  dC_2/dt = +fflux*(A_1*B_1)-fout*(C_2)-rflux*(C_2)
  dCo_0/dt = +fout*(C_0)
  dCo_1/dt = +fout*(C_1)
  dCo_2/dt = +fout*(C_2)
}}}

To create the model studied in the above paper, please make sure that `iocbio.kinetics.builder` is in the same directory 
as the example file `iocbio.kinetics.oxygen_isotope_model` and run the example file with a Python interpreter. One can examine the contents of the files generated to view the equations.  The output from this script only describes what the 
algorithm is doing:
{{{
>>> python oxygen_isotope_model.py
Generating isotopologue equations:
Performing first term collection.
Performing second term collection.
Generating mass isotopologue equations:
Applying pool relations.
Performing first term collection.
Performing second term collection.
Performing third term collection.
Performing final term collection.

Wrote:  model_3000_mass.c
Wrote:  model_3000_mass_c_variables.py
}}}