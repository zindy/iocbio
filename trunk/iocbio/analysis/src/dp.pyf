! -*- f90 -*-
python module dp
  interface

     subroutine detrend(f, n, m, period, r)
       fortranname iocbio_detrend
       intent(c) detrend
       double precision dimension (m, n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       double precision intent(c,in), optional :: period = 0.0
       double precision intent(c,out), dimension (m,n) :: r
     end subroutine detrend

     subroutine trend(f, n, m, period, r)
       fortranname iocbio_trend
       intent(c) trend
       double precision dimension (m, n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       double precision intent(c,in), optional :: period = 0.0
       double precision intent(c,out), dimension (m,n) :: r
     end subroutine trend

     subroutine trend_spline(f, n, period, nof_extremes, extreme_positions, extreme_values, nof_averages, average_positions, average_values)
       fortranname iocbio_compute_trend_spline_data
       intent(c) trend_spline
       double precision dimension (n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = len(f)
       double precision intent(c,in), optional :: period = 0.0
       integer intent (out) :: nof_extremes, nof_averages
       double precision intent(c,out), depend(n), dimension (n) :: extreme_positions, extreme_values, average_positions, average_values
     end subroutine trend_spline

     function fperiod_cached(f, n, m, initial_period, detrend, method, cache) result (period)
       fortranname iocbio_fperiod_cached
       intent (c) fperiod_cached
       double precision dimension (m, n), intent(in,c):: f
       double precision dimension (m, n), intent(in,c,cache):: cache
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       double precision intent(c,in), optional :: initial_period = 0.0
       integer, intent(c,in), optional :: detrend = 0
       double precision :: period
       integer, intent(c,in), optional :: method = 0 ! 0:e11, 1:a11
     end function fperiod_cached

     function fperiod (f, n, m, initial_period, detrend, method) result (period)
       fortranname iocbio_fperiod
       intent (c) fperiod
       double precision dimension (m, n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       double precision intent(c,in), optional :: initial_period = 0.0
       integer, intent(c,in), optional :: detrend = 0
       double precision :: period
       integer, intent(c,in), optional :: method = 0 ! 0:e11, 1:a11
     end function fperiod

     subroutine objective(y, k, f, n, m, order, method, r)
       fortranname iocbio_objective
       intent(c) objective
       double precision dimension (k), intent (in, c) :: y
       integer, depend (y), intent (c, hide) :: k = len(y)
       double precision dimension (m, n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       integer, intent (c), optional :: order = 0
       double precision intent(c,out), dimension (k), depend(k) :: r
       integer, intent(c,in), optional :: method = 0 ! 0:e11, 1:a11
     end subroutine objective

  end interface
end module dp
