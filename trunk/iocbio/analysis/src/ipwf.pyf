

python module ipwf
  interface
    
    function e11_find_extreme(j0, j1, f, n, m, order, res) result (status)
       intent(c) e11_find_extreme
       fortranname iocbio_ipwf_e11_find_extreme
       integer intent(in, c) :: j0, j1
       double precision dimension (m, n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       integer intent(c), optional :: order = 0
       double precision, intent(out) :: res
       integer :: status
    end function  e11_find_extreme
        
    function e11_find_zero(j0, j1, f, n, m, order, res, slope) result (status)
       intent(c) e11_find_zero
       fortranname iocbio_ipwf_e11_find_zero
       integer intent(in, c) :: j0, j1
       double precision dimension (m, n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       integer intent(c), optional :: order = 0
       double precision, intent(out) :: res, slope
       integer :: status
    end function  e11_find_zero
        
    function e11_evaluate(y, f, n, m, order) result (value)
       intent(c) e11_evaluate
       fortranname iocbio_ipwf_e11_evaluate
       double precision intent(in, c) :: y
       double precision dimension (m, n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       integer intent(c), optional :: order = 0
       double precision :: value
    end function  e11_evaluate
        
    function e11_f1_evaluate (x, f, n, order) result (value)
      intent (c) e11_f1_evaluate
      fortranname iocbio_ipwf_e11_f1_evaluate
      double precision intent(in, c) :: x
      double precision dimension (n), intent(in,c):: f
      integer, depend(f), intent(c,hide) :: n = shape (f,0)
      integer intent(c), optional :: order = 0
      double precision :: value
    end function e11_f1_evaluate

    function e11_f2_evaluate (x, f, n, order) result (value)
      intent (c) e11_f2_evaluate
      fortranname iocbio_ipwf_e11_f2_evaluate
      double precision intent(in, c) :: x
      double precision dimension (n), intent(in,c):: f
      integer, depend(f), intent(c,hide) :: n = shape (f,0)
      integer intent(c), optional :: order = 0
      double precision :: value
    end function e11_f2_evaluate

    function a11_find_extreme(j0, j1, f, n, m, order, res) result (status)
       intent(c) a11_find_extreme
       fortranname iocbio_ipwf_a11_find_extreme
       integer intent(in, c) :: j0, j1
       double precision dimension (m, n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       integer intent(c), optional :: order = 0
       double precision, intent(out) :: res
       integer :: status
    end function  a11_find_extreme
        
    function a11_find_zero(j0, j1, f, n, m, order, res, slope) result (status)
       intent(c) a11_find_zero
       fortranname iocbio_ipwf_a11_find_zero
       integer intent(in, c) :: j0, j1
       double precision dimension (m, n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       integer intent(c), optional :: order = 0
       double precision, intent(out) :: res, slope
       integer :: status
    end function  a11_find_zero
        
    function a11_evaluate(y, f, n, m, order) result (value)
       intent(c) a11_evaluate
       fortranname iocbio_ipwf_a11_evaluate
       double precision intent(in, c) :: y
       double precision dimension (m, n), intent(in,c):: f
       integer, depend(f), intent(c,hide) :: n = (shape(f,1)==1?shape (f,0):shape(f,1))
       integer, depend(f), intent(c,hide) :: m = (shape(f,1)==1?1:shape(f,0))
       integer intent(c), optional :: order = 0
       double precision :: value
    end function  a11_evaluate
        
    function a11_f1_evaluate (x, f, n, order) result (value)
      intent (c) a11_f1_evaluate
      fortranname iocbio_ipwf_a11_f1_evaluate
      double precision intent(in, c) :: x
      double precision dimension (n), intent(in,c):: f
      integer, depend(f), intent(c,hide) :: n = shape (f,0)
      integer intent(c), optional :: order = 0
      double precision :: value
    end function a11_f1_evaluate

    function a11_f2_evaluate (x, f, n, order) result (value)
      intent (c) a11_f2_evaluate
      fortranname iocbio_ipwf_a11_f2_evaluate
      double precision intent(in, c) :: x
      double precision dimension (n), intent(in,c):: f
      integer, depend(f), intent(c,hide) :: n = shape (f,0)
      integer intent(c), optional :: order = 0
      double precision :: value
    end function a11_f2_evaluate

  end interface
end python module
    